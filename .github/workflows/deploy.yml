name: Deploy Smart Chatbot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
      working-directory: lambda
    
    - name: Run linter
      run: npm run lint
      working-directory: lambda
    
    - name: Check code formatting
      run: npm run format:check
      working-directory: lambda
    
    - name: Run tests
      run: npm test
      working-directory: lambda

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Lambda dependencies
      run: |
        cd lambda
        npm ci
        npm run validate
    
    - name: Package Lambda function
      run: |
        cd lambda
        npm run package
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.5
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setup Terraform Backend (S3 + DynamoDB)
      run: |
        BUCKET_NAME="smart-chatbot-terraform-state-907849381252"
        TABLE_NAME="terraform-state-lock"
        
        # Create S3 bucket if it doesn't exist
        if ! aws s3api head-bucket --bucket ${BUCKET_NAME} 2>/dev/null; then
          echo "Creating S3 bucket for Terraform state..."
          aws s3api create-bucket --bucket ${BUCKET_NAME} --region us-east-1
          aws s3api put-bucket-versioning --bucket ${BUCKET_NAME} --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket ${BUCKET_NAME} --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
        else
          echo "S3 bucket ${BUCKET_NAME} already exists"
        fi
        
        # Create DynamoDB table if it doesn't exist
        if ! aws dynamodb describe-table --table-name ${TABLE_NAME} >/dev/null 2>&1; then
          echo "Creating DynamoDB table for state locking..."
          aws dynamodb create-table \
            --table-name ${TABLE_NAME} \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        else
          echo "DynamoDB table ${TABLE_NAME} already exists"
        fi
    
    - name: Terraform Init
      run: terraform init
      working-directory: terraform
    
    - name: Terraform Plan
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          terraform plan -var="environment=prod"
        else
          terraform plan -var="environment=dev"
        fi
      working-directory: terraform
      env:
        TF_VAR_aws_account_id: 907849381252
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          terraform apply -auto-approve -var="environment=prod"
        else
          terraform apply -auto-approve -var="environment=dev"
        fi
      working-directory: terraform
      env:
        TF_VAR_aws_account_id: 907849381252